#ifndef PLATFORM_API_H
#include <string.h>
#include <stdlib.h>

#include "freertos/FreeRTOS.h"
#include "freertos/task.h"

#include "esp_http_client.h"
#include "esp_heap_caps.h"
#include "esp_system.h"
#include "esp_event.h"
#include "esp_netif.h"
#include "esp_log.h"
#include "esp_err.h"
#include "stdbool.h"
#include "cJSON.h"

esp_err_t _caps_common_err(esp_err_t err_code, const char* tag, const char* err_file, int err_line, const char* func, const char* expression);

#define ERR_CHECK(tag, x) ({                                                       \
  esp_err_t err_rc = (x);                                                               \
  if(unlikely(err_rc != ESP_OK)){                                                       \
    return _caps_common_err(err_rc, tag, __FILE__, __LINE__, __PRETTY_FUNCTION__, #x);  \
  }                                                                                     \
})

#define ERR_CHECK_NO_RETURN(tag, x) ({                                                 \
  esp_err_t err_rc = (x);                                                                   \
  esp_err_t err_ret = err_rc;                                                               \
  if(unlikely(err_rc != ESP_OK)){                                                           \
    err_ret = _caps_common_err(err_rc, tag, __FILE__, __LINE__, __PRETTY_FUNCTION__, #x);   \
  }                                                                                         \
  err_ret;                                                                                  \
})

/**
 * @brief Defines which data types can be retrieved from this API
 * 
 */
typedef enum {
  INT,
  STRING,
} cjson_types_t;

/**
 * @brief Initializes the IoT Platform API.
 * 
 * @param[in] endpoint sets the IoT Platform endpoint to be used by the library. 
 * @return esp_err_t error number in case there was a problem initializing the API.
 */
esp_err_t platform_api_init(const char* endpoint);


/**
 * @brief Sets the query strings required in the endpoint.
 *
 *        This values will be appended to the endpoint URL.
 *        If you are using `type` as field and `device` as 
 *        value, it is required to also set the query string
 *        of `deviceId=<device_id>`.
 *
 *        This method can be called multiple times. They will
 *        be appended to the query string.
 * 
 * @param field Specific field accepted by the IoT Platform.
 * @param value Accepted values for the field.
 * @return esp_err_t 
 */
esp_err_t platform_api_set_query_string(const char* field, const char* value);

/**
 * @brief Performs an HTTP request to the IoT Platform endpoint.
 *
 *        This method can be called multiple times. You must call
 *        platform_api_cleanup to free the memory allocated
 *        by the library.
 * 
 * @return esp_err_t error number in case there was a problem performing the request.
 */
esp_err_t platform_api_perform_request(void);

/**
 * @brief Retrieves a value from the response of the IoT Platform.
 *
 *        Here, the user has the responsability to allocate the proper
 *        memory space for the retrieved value. If the expected type is
 *        a string, the user must allocate a `char*`. If the expected type
 *        is an integer, it is sufficient to create a local variable and pass
 *        the pointer.
 *        In the case json_parse is set to false, the library will return an
 *        malloced copy of the response. The user must free the memory allocated
 *        to avoid memory leaks.
 * 
 * @param[in] field specific field expected in the IoT Platform response.
 * @param[in] type expected type of the retrieved value.
 * @param[in] json_parse should the response be treated as a JSON object.
 * @param[out] output allocated memory space for the retrieved value (only applies for INT or OBJECT)
 * @param[out] string allocated memory space for a string. The user is responsible for freeing this resource after usage.
 * @return esp_err_t error number in case there was a problem retrieving the value.
 */
esp_err_t platform_api_retrieve_val(const char* field, cjson_types_t type, bool json_parse, void* output, void** string);

/**
 * @brief Cleans up the memory allocated by the library.
 * 
 * @return esp_err_t error number in case there was a problem cleaning up the memory.
 */
esp_err_t platform_api_cleanup(void);

/**
 * @brief Configures the Authorization token to be used by the library.
 *
 *        The token will be sent as `Bearer <token>` in the Authorization header.
 * 
 * @param[in] token Device Token generated by the IoT Platform.
 * @return esp_err_t  error number in case there was a problem setting the token.
 */
esp_err_t platform_api_set_token(const char* token);


#define PLATFORM_API_H
#endif // PLATFORM_API_H